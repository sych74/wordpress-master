jpsType: install
jpsVersion: '1.1'
name: WordPress Cluster

globals:
  PATH: ${settings.PATH}
  MASTER_ENV: ${settings.MASTER_ENV:false}
  SLAVE_ENV: ${settings.SLAVE_ENV:false}
  CP_NODE_TYPE: ${settings.CP_NODE_TYPE}
  BL_NODE_TYPE: ${settings.BL_NODE_TYPE}
  APP_CONFIGS_PATH: ${settings.APP_CONFIGS_PATH}
  REGION: ${settings.REGION}
  SCALING_LOAD_GROWTH: ${settings.loadGrowth}
  
skipNodeEmails: true
nodes:
  - nodeType: ${globals.BL_NODE_TYPE}
    count: 1
    cloudlets: 8
    nodeGroup: bl
    scalingMode: STATEFUL
    displayName: Load balancer
    volumes:
      - "/var/lib/jelastic/SSL"
    volumeMounts:
      "/var/lib/jelastic/SSL":
        readOnly: false
        sourcePath: "/data/SSL"
        sourceNodeGroup: storage

  - nodeType: ${globals.CP_NODE_TYPE}
    count: 1
    cloudlets: 8
    nodeGroup: cp
    scalingMode: STATELESS
    displayName: AppServer
    volumes:
      - /var/www/webroot/ROOT
      - ${globals.APP_CONFIGS_PATH}
      - /var/www/webroot/.cache
    volumeMounts:
      "/var/www/webroot/ROOT":
        readOnly: false
        sourcePath: "/data/ROOT"
        sourceNodeGroup: storage
      "${globals.APP_CONFIGS_PATH}":
        readOnly: false
        sourcePath: "/data/APP_CONFIGS"
        sourceNodeGroup: storage
      "/var/www/webroot/.cache":
        readOnly: false
        sourcePath: "/data/.cache"
        sourceNodeGroup: storage
    env:
      SERVER_WEBROOT: /var/www/webroot/ROOT
      REDIS_ENABLED: TRUE

  - nodeType: mariadb-dockerized
    tag: 10.3.16
    count: 3
    cloudlets: 8
    nodeGroup: sqldb
    displayName: Galera cluster
    nodeGroupData:
      validation:
        minCount: 3
    env:
      ON_ENV_INSTALL: ''
      JELASTIC_PORTS: '4567,4568,4444'

  - nodeType: storage
    cloudlets: 8
    nodeGroup: storage
    displayName: Storage
    nodeGroupData:
      validation:
        maxCount: 1

    
onAfterScaleOut[nodeGroup:cp]:
  forEach(event.response.nodes):
    - log: App Servers Setup
    - setNodeDisplayName [${@i.id}]: AppServer
    - setupNode:
        nodeId: ${@i.id}

onAfterMigrate:
  install: ${globals.PATH}/addon/Domain.jps?_r=${fn.random}
  envName: ${event.response.env.envName}
  settings:
    new_domain: ${event.response.env.domain}
    
onAfterClone:
  install: ${globals.PATH}/addon/Domain.jps?_r=${fn.random}
  envName: ${event.response.env.envName}
  settings:
    new_domain: ${event.response.env.domain}

onAfterInstallAddon [nodeGroup:cp, id:cdn]:
  - install: ${globals.PATH}/scripts/setupCDN.jps
    settings:
      PATH: ${globals.PATH}
      
onBeforeInstallAddon [nodeGroup:bl, id:letsencrypt-ssl-addon]:
  - if ("${globals.SLAVE_ENV}"):
    - api: jelastic.env.control.GetEnvInfo
      envName: ${globals.MASTER_ENV}
    - forEach(response.nodes):
        if (${@i.ismaster} && '${@i.nodeGroup}' == 'bl'):
          - setGlobals:
              MASTER-IP: ${@i.intIP}
    - install: ${globals.PATH}/scripts/redirectManage.jps?_r=${fn.random}
      envName: ${globals.SLAVE_ENV}
      envGroups: ${response.envGroups}
      settings:
        targetGroup: bl
        dest_ip: ${globals.MASTER-IP}
        dest_port: 80
        action: -I

onAfterInstallAddon [nodeGroup:bl, id:letsencrypt-ssl-addon]:
  - if ("${globals.SLAVE_ENV}"):
    - api: jelastic.env.control.GetEnvInfo
      envName: ${globals.MASTER_ENV}
    - forEach(response.nodes):
        if (${@i.ismaster} && '${@i.nodeGroup}' == 'bl'):
          - setGlobals:
              MASTER-IP: ${@i.intIP}
    - install: ${globals.PATH}/scripts/redirectManage.jps?_r=${fn.random}
      envName: ${globals.SLAVE_ENV}
      envGroups: ${response.envGroups}
      settings:
        targetGroup: bl
        dest_ip: ${globals.MASTER-IP}
        dest_port: 80
        action: -D

onAfterBindSSL:
  log: ------- BIND SSL ----------


onInstall:
  - log: Auto Scaling Triggers
  - script: "${globals.PATH}/scripts/addTriggers.js"
    nodeGroup: cp
    resourceType: CPU
    loadGrowth: ${globals.SCALING_LOAD_GROWTH}
    cleanOldTriggers: true
    
  - log: Set Node Display Name
  - setNodeDisplayName [bl]: Load balancer
  - setNodeDisplayName [cp]: AppServer
  - setNodeDisplayName [storage]: Storage  

  - setGlobals:
      DB_USER: ${settings.db_user:jelastic-[fn.random]}
      DB_PASS: ${settings.db_pass:[fn.password(10)]}

  - log: DB Galera  Setup
  - install: https://raw.githubusercontent.com/sych74/mysql-cluster/master/scripts/galera-configuration.jps
    settings:
      db_user: "${globals.DB_USER}"
      db_pass: "${globals.DB_PASS}"
      custom_conf: "${globals.PATH}/configs/sqldb/wordpress.cnf"
    nodeGroup: sqldb

  - setupNode:
      nodeId: cp

  - log: Site Configuration
  - install: ${globals.PATH}/scripts/setupSITES.jps?_r=${fn.random}
    settings:
      TARGET_NODES: cp

actions:
  setupNode:
    - log: App Server Configuration
    - install: ${globals.PATH}/scripts/setupCP.jps?_r=${fn.random}
      settings:  
        TARGET_NODES: ${this.nodeId}

    - log: Wordpress CLI Installation
    - install: ${globals.PATH}/scripts/WP-CLI.jps?_r=${fn.random}
      settings:
        TARGET_NODES: ${this.nodeId}
