jpsType: install
jpsVersion: '1.1'
name: WordPress Cluster

globals:
  PATH: ${settings.PATH}
  MASTER_ENV: ${settings.MASTER_ENV:false}
  SLAVE_ENV: ${settings.SLAVE_ENV:false}
  CP_NODE_TYPE: ${settings.CP_NODE_TYPE}
  CP_NODE_TAG: ${settings.CP_NODE_TAG}
  BL_NODE_TYPE: ${settings.BL_NODE_TYPE}
  BL_NODE_TAG: ${settings.BL_NODE_TAG}
  APP_CONFIGS_PATH: ${settings.APP_CONFIGS_PATH}
  REGION: ${settings.REGION}
  SCALING_LOAD_GROWTH: ${settings.loadGrowth}
  
skipNodeEmails: true
nodes:
  - nodeType: ${globals.BL_NODE_TYPE}
    tag: ${globals.BL_NODE_TAG}
    count: 1
    cloudlets: 8
    nodeGroup: bl
    scalingMode: STATEFUL
    displayName: Load balancer

  - nodeType: ${globals.CP_NODE_TYPE}
    tag: ${globals.CP_NODE_TAG}
    count: 1
    cloudlets: 8
    nodeGroup: cp
    scalingMode: STATELESS
    displayName: AppServer
    volumes:
      - /var/www/webroot/ROOT
      - ${globals.APP_CONFIGS_PATH}
      - /var/www/webroot/.cache
    volumeMounts:
      "/var/www/webroot/ROOT":
        readOnly: false
        sourcePath: "/data/ROOT"
        sourceNodeGroup: storage
      "${globals.APP_CONFIGS_PATH}":
        readOnly: false
        sourcePath: "/data/APP_CONFIGS"
        sourceNodeGroup: storage
      "/var/www/webroot/.cache":
        readOnly: false
        sourcePath: "/data/.cache"
        sourceNodeGroup: storage
    env:
      SERVER_WEBROOT: /var/www/webroot/ROOT
      REDIS_ENABLED: TRUE

  - nodeType: mariadb-dockerized
    tag: 10.3.16
    count: 3
    cloudlets: 8
    nodeGroup: sqldb
    displayName: Galera cluster
    nodeGroupData:
      validation:
        minCount: 3
    env:
      ON_ENV_INSTALL: ''
      JELASTIC_PORTS: '4567,4568,4444'

  - nodeType: storage
    cloudlets: 8
    nodeGroup: storage
    displayName: Storage
    nodeGroupData:
      validation:
        maxCount: 1

    
onAfterScaleOut[nodeGroup:cp]:
  forEach(event.response.nodes):
    - log: App Servers Setup
    - setNodeDisplayName [${@i.id}]: AppServer
    - setupNode:
        nodeId: ${@i.id}

onAfterMigrate:
  install: ${globals.PATH}/addon/Domain.jps?_r=${fn.random}
  envName: ${event.response.env.envName}
  settings:
    new_domain: ${event.response.env.domain}
    
onAfterClone:
  install: ${globals.PATH}/addon/Domain.jps?_r=${fn.random}
  envName: ${event.response.env.envName}
  settings:
    new_domain: ${event.response.env.domain}

onAfterInstallAddon [nodeGroup:cp, id:cdn]:
  - install: ${globals.PATH}/scripts/setupCDN.jps
    settings:
      PATH: ${globals.PATH}
      
onBeforeInstallAddon [nodeGroup:cp, id:letsencrypt-ssl-addon]:
  - if ('${globals.SLAVE_ENV}' != 'false'):
    - api: jelastic.env.control.GetEnvInfo
      envName: ${globals.SLAVE_ENV}
    - forEach(response.nodes):
        - if ('${@i.nodeGroup}' == 'bl'):
          - env.binder.AttachExtIp:
              envName: ${globals.SLAVE_ENV}
              nodeid:  ${@i.id}

onAfterBindSSL:
  - cmd[bl]: source /opt/letsencrypt/settings && echo $domain
  - set:
      domain: ${response.out}
  - cmd[cp]: bash ~/bin/setupWP.sh --DOMAIN https://${this.domain}/

  - if ('${globals.SLAVE_ENV}' != 'false'):
    - api: jelastic.env.control.GetEnvInfo
      envName: ${globals.SLAVE_ENV}
    - forEach(response.nodes):
        if ('${@i.nodeGroup}' == 'bl'):
          - set:
              SLAVE-ID: ${@i.id}
    - env.control.ExecCmdById:
      envName: ${globals.SLAVE_ENV}
      nodeId: ${this.SLAVE-ID}
      userName: root
      commandList: 
        - command: |-
            jem ssl install

onInstall:
  - log: Auto Scaling Triggers
  - script: "${globals.PATH}/scripts/addTriggers.js"
    nodeGroup: cp
    resourceType: CPU
    loadGrowth: ${globals.SCALING_LOAD_GROWTH}
    cleanOldTriggers: true
    
  - log: Set Node Display Name
  - setNodeDisplayName [bl]: Load balancer
  - setNodeDisplayName [cp]: AppServer
  - setNodeDisplayName [storage]: Storage  

  - setGlobals:
      DB_USER: ${settings.db_user:jelastic-[fn.random]}
      DB_PASS: ${settings.db_pass:[fn.password(10)]}

  - log: DB Galera  Setup
  - install: https://raw.githubusercontent.com/sych74/mysql-cluster/master/scripts/galera-configuration.jps
    settings:
      db_user: "${globals.DB_USER}"
      db_pass: "${globals.DB_PASS}"
      custom_conf: "${globals.PATH}/configs/sqldb/wordpress.cnf"
    nodeGroup: sqldb

  - log: App Server Configuration and dummy addons for slave
  - if ('${env.envName}' == '${globals.SLAVE_ENV}'):
      install: 
        - jps: ${globals.PATH}/scripts/webrootModeForLE.jps?_r=${fn.random}
          settings:
            PATH: ${globals.PATH}
            ENV_TYPE: slave
            TOPOLOGY: standalone

        - jps: ${globals.PATH}/scripts/dummyLE.jps?_r=${fn.random}
          nodeGroup: bl
          skipEmail: true

        - jps: ${globals.PATH}/scripts/dummyCDN.jps?_r=${fn.random}        
          nodeGroup: bl            
          skipEmail: true

  - setupNode:
      nodeId: cp

actions:
  setupNode:
    - log: OPTIMIZATION
    - install: https://raw.githubusercontent.com/sych74/templates/master/config.jps?_r=${fn.random}
      settings:
        targetGroup: cp
        targetNodes: ${this.nodeId}
        optimization: wordpress

    - log: Wordpress CLI Installation
    - install: ${globals.PATH}/scripts/WP-CLI.jps?_r=${fn.random}
      settings:
        TARGET_NODES: ${this.nodeId}
