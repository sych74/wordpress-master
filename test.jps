version: 1.1
type: install
id: wp-cluster-pack
name: Enterprise WordPress
description:
  text: WordPress Cluster package provides integrated autoscaling and high availability for development and production environments.
    The platform automatically deploys and configures chosen tolopology and required addons at specified regions.
  short: WordPress Cluster Pack
logo: /images/wp_logo_70.png
baseUrl: https://raw.githubusercontent.com/sych74/wordpress-master/master

onBeforeInit: /scripts/settings.js
globals:
  DB_USER: jelastic-${fn.random}
  DB_PASS: ${fn.password(10)}
  SYNC_PASS: ${fn.password(10)}
  PROTOCOL: http
  WP_ADMIN_PASS: ${fn.password(10)}
  MU_REGIONS: false
  CLUSTER_TYPE: oneregion
  SUCCESS: success
  EMAIL: default

onInstall:
  - if (!${settings.ls-addon:false}):
      - if ('${settings.topology}' == 'standalone'):
        setGlobals:
          CP_NODE_TYPE: lemp
          APP_CONFIGS_PATH: /etc/nginx/conf.d/SITES_ENABLED

      - if ('${settings.topology}' == 'cluster'):
          setGlobals:
            CP_NODE_TYPE: nginxphp-dockerized
            BL_NODE_TYPE: nginx-dockerized
            APP_CONFIGS_PATH: /etc/nginx/conf.d/SITES_ENABLED

  - if (${settings.ls-addon:false}):
      - if ('${settings.topology}' == 'standalone'):
          setGlobals:
            CP_NODE_TYPE: llsmp
            APP_CONFIGS_PATH: /var/www/webroot/TMP

      - if ('${settings.topology}' == 'cluster'):
          setGlobals:
            CP_NODE_TYPE: litespeedphp
            BL_NODE_TYPE: litespeedadc
            APP_CONFIGS_PATH: /var/www/webroot/TMP

  - createEnvs: ${settings.envName}

  - forEach(response.regions):
      run:
        envName: ${settings.envName}
        region: ${@i}
        index: ${@}

  - if (${globals.MU_REGIONS}):
      - if ('${settings.topology}' == 'standalone'):
        - addSSLVolume:
            nodeId: ${globals.masterCP-ID1}
            sourceNodeId: ${globals.masterCP-ID0}
      - if ('${settings.topology}' == 'cluster'):
        - addSSLVolume:
            nodeId: ${globals.masterBL-ID1}
            sourceNodeId: ${globals.masterBL-ID0}
  
actions:
  createEnvs:
    - script: |
        return {
          result:0,
          regions:'${settings.regions}'.split(','),
          envGroups:eval('(' + MANIFEST + ')').envGroups
        }

    - setGlobals:
        region1: ${response.regions[0]}
        region2: ${response.regions[1]}
        envName1: ${this}
        envName2: ${this}-1
        envGroups: ${response.envGroups}

    - if (${response.regions.length} > 1):
        setGlobals:
          MU_REGIONS: true
          CLUSTER_TYPE: multiregion

    - if (${globals.MU_REGIONS}):
        install:
          - jps: /topology/test.jps?_r=${fn.random}
            envName: ${globals.envName1}
            loggerName: ${globals.envName1}
            envGroups: ${response.envGroups}
            region: ${globals.region1}
            displayName: WP ${settings.topology} MASTER
            settings:
              PATH: ${baseUrl}
              MASTER_ENV: ${globals.envName1}
              SLAVE_ENV: ${globals.envName2}
              CP_NODE_TYPE: ${globals.CP_NODE_TYPE}
              BL_NODE_TYPE: ${globals.BL_NODE_TYPE}
              APP_CONFIGS_PATH: ${globals.APP_CONFIGS_PATH}
              REGION: ${globals.region1}
              loadGrowth: ${settings.loadGrowth}
              db_user: ${globals.DB_USER}
              db_pass: ${globals.DB_PASS}

          - jps: /topology/test.jps?_r=${fn.random}
            envName: ${globals.envName2}
            loggerName: ${globals.envName2}
            envGroups: ${response.envGroups}
            region: ${globals.region2}
            displayName: WP ${settings.topology} SLAVE
            settings:
              PATH: ${baseUrl}
              MASTER_ENV: ${globals.envName1}
              SLAVE_ENV: ${globals.envName2}
              CP_NODE_TYPE: ${globals.CP_NODE_TYPE}
              BL_NODE_TYPE: ${globals.BL_NODE_TYPE}
              APP_CONFIGS_PATH: ${globals.APP_CONFIGS_PATH}
              REGION: ${globals.region2}
              loadGrowth: ${settings.loadGrowth}
              db_user: ${globals.DB_USER}
              db_pass: ${globals.DB_PASS}

    - if (!${globals.MU_REGIONS}):
        install: /topology/${settings.topology}.jps?_r=${fn.random}
        envName: ${globals.envName1}
        envGroups: ${response.envGroups}
        region: ${globals.region1}
        displayName: WP ${settings.topology}
        settings:
          PATH: ${baseUrl}
          MASTER_ENV: ${globals.envName1}
          CP_NODE_TYPE: ${globals.CP_NODE_TYPE}
          BL_NODE_TYPE: ${globals.BL_NODE_TYPE}
          APP_CONFIGS_PATH: ${globals.APP_CONFIGS_PATH}
          REGION: ${globals.region1}
          loadGrowth: ${settings.loadGrowth}
          db_user: ${globals.DB_USER}
          db_pass: ${globals.DB_PASS}

    - script: |
        return { result : 0, regions: '${settings.regions}'.split(',') };    
  run:
    - script: |
        var resp, result;
        resp = jelastic.env.control.GetRegions(appid, session);
        if (resp.result != 0) return resp;
        resp = resp.array;
        for (var i = 0, n = resp.length; i < n; i++) {
          for (var k = 0, l = resp[i].hardNodeGroups.length; k < l; k++) {
            if (resp[i].hardNodeGroups[k].uniqueName == '${this.region}') {
              return {result: 0, domain: resp[i].domain}
            }
          }
        }
    - setGlobals:
        REGION-${this.index}: ${response.domain}

    - if (!${this.index}):
        setup-cluster:
          envName: ${this.envName}
          region: ${this.region}
          index: ${this.index}
    - if (${this.index}):
        setup-cluster:
          envName: ${this.envName}-${this.index}
          region: ${this.region}
          index: ${this.index}
          masterEnv: ${this.envName}

  setup-cluster:
    - if ('${settings.topology}' == 'standalone'):
        - setGlobals:
            DB_HOST: 127.0.0.1
            lsync-nodeGroup: cp
            cdn-nodeGroup: cp
            le-nodeGroup: cp

        - api: jelastic.env.control.GetEnvInfo
          envName: ${this.envName}
        - forEach(response.nodes):
            if (${@i.ismaster} && '${@i.nodeGroup}' == 'cp'):
              - setGlobals:
                  masterDB-IP${this.index}: ${@i.address}
                  masterDB-ID${this.index}: ${@i.id}
                  masterCP-ID${this.index}: ${@i.id}
                  storage-IP${this.index}: ${@i.address}

              - if (${globals.MU_REGIONS}):
                  - setup-DB-master:
                      nodeId: ${@i.id}
                      envName: ${this.envName}
                      index: ${this.index}

    - if ('${settings.topology}' == 'cluster'):
        - setGlobals:
            DB_HOST: sqldb
            lsync-nodeGroup: storage
            cdn-nodeGroup: bl
            le-nodeGroup: bl

        - api: jelastic.env.control.GetEnvInfo
          envName: ${this.envName}
        - forEach(response.nodes):
            - if ('${@i.nodeGroup}' == 'storage'):
                - setGlobals:
                    storage-IP${this.index}: ${@i.address}

            - if ('${@i.nodeGroup}' == 'bl'):
                - setGlobals:
                    masterBL-ID${this.index}: ${@i.id}

            - if (${@i.ismaster} && '${@i.nodeGroup}' == 'cp'):
                - setGlobals:
                    masterCP-ID${this.index}: ${@i.id}

            - if (${@i.ismaster} && '${@i.nodeGroup}' == 'sqldb'):
                - setGlobals:
                    masterDB-IP${this.index}: ${@i.address}
                    masterDB-ID${this.index}: ${@i.id}

                - if (${globals.MU_REGIONS}):
                    - setup-DB-master:
                        nodeId: ${@i.id}
                        envName: ${this.envName}
                        index: ${this.index}

    - if (${settings.cdn-addon:false}):
        install-edgeport-CDN:
          envName: ${this.envName}
          masterEnv: ${this.masterEnv:}

  setup-DB-master:
    - api: env.control.ExecCmdById
      envName: ${this.envName}
      nodeId: ${this.nodeId}
      commandList:
        - command: |-
            wget https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/configs/increment.cnf -O /etc/mysql/conf.d/increment.cnf
            wget https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/configs/master.cnf -O /etc/mysql/conf.d/master.cnf &>> /var/log/run.log
            sed -i "s/auto-increment-offset.*/auto-increment-offset = $((${this.index} + 1))/" /etc/mysql/conf.d/increment.cnf
            sed -i '/server-id.*/d' /etc/mysql/conf.d/master.cnf
            sed -i '/binlog_format.*/d' /etc/mysql/conf.d/master.cnf
            sudo /etc/init.d/mysql restart

  setup-replication:
    - install: https://raw.githubusercontent.com/sych74/mysql-cluster/master/addons/regions-replication.jps?_r=${fn.random}
      envName: ${settings.envName}
      settings:
        targetNodeID: ${globals.masterDB-ID0}
        remote_db_host: ${globals.masterDB-IP1}
        remote_db_user: ${globals.DB_USER}
        remote_db_pass: ${globals.DB_PASS}
        local_db_host: ${globals.masterDB-IP0}
        local_db_user: ${globals.DB_USER}
        local_db_pass: ${globals.DB_PASS}

  setup-synchronization:
    install:
      - jps: https://raw.githubusercontent.com/dzotic91-ukr/file-sync/master/manifest.jps?_r=${fn.random}
        envName: ${settings.envName}
        nodeGroup: ${globals.lsync-nodeGroup}
        skipEmail: true
        settings:
          optional: two_envs
          address: ${globals.storage-IP1}
          password: ${globals.SYNC_PASS}
          delay: 10

      - jps: https://raw.githubusercontent.com/dzotic91-ukr/file-sync/master/manifest.jps?_r=${fn.random}
        envName: ${settings.envName}-1
        nodeGroup: ${globals.lsync-nodeGroup}
        skipEmail: true
        settings:
          optional: two_envs
          address:  ${globals.storage-IP0}
          password: ${globals.SYNC_PASS}
          delay: 10

  addSSLVolume:
    - api: env.file.AddMountPointById
      envName: ${globals.envName2}
      nodeId: ${this.nodeId}
      path: /var/lib/jelastic/SSL
      protocol: nfs
      sourcePath: /var/lib/jelastic/SSL
      sourceNodeId: ${this.sourceNodeId}
      name: SSL mount
      readOnly: true

  install-LE-addon:
    install: https://github.com/sych74/lets-encrypt/blob/master/manifest.jps?_r=${fn.random}
    envName: ${settings.envName}
    nodeGroup: ${globals.le-nodeGroup}
    skipEmail: true
    settings:
      customDomains: ${settings.envName}.${globals.REGION-0}

  install-edgeport-CDN:
    install: https://raw.githubusercontent.com/edgeport/cdn/master/manifest.yml?_r=${fn.random}
    envName: ${settings.envName}
    nodeGroup: ${globals.cdn-nodeGroup}
    skipEmail: true
    settings:
      masterEnv: ${this.masterEnv:}    

  configure-edgeport-CDN:
    - script: return jelastic.dev.scripting.Eval("c05ffa5b45628a2a0c95467ebca8a0b4", session, "cdn.info", {partnerCode:1})
    - setGlobals:
        CDN_URL: ${globals.PROTOCOL}://${settings.envName}-${response.response.partnerCode}.cdn.edgeport.net/
        SUCCESS: success-cdn
        EMAIL: cdn
    - install: ${baseUrl}/scripts/setupCDN.jps
      envName: ${settings.envName}
      settings:
        PATH: ${baseUrl}
        CDN_URL: ${globals.CDN_URL}
        TARGET_NODE_ID: ${globals.masterCP-ID0}

  configure-MU:
    - install: ${baseUrl}/addon/WPMU.jps
      envName: ${settings.envName}
      settings:
        mode: subdir

  install-wordpress:
    - install: ${baseUrl}/scripts/installWP.jps
      envName: ${settings.envName}
      settings:
        db_host: ${globals.DB_HOST}
        db_user: ${globals.DB_USER}
        db_pass: ${globals.DB_PASS}
        wp_admin_pass: ${globals.WP_ADMIN_PASS}
        wp_title: "Hello World"
        wp_url: ${globals.PROTOCOL}://${env.domain}/
        targetNodeID: ${globals.masterCP-ID0}

    - api: env.control.ExecCmdById
      envName: ${settings.envName}
      nodeId: ${globals.masterCP-ID0}
      commandList:
        - command: |-
            wget ${baseUrl}/scripts/setupWP.sh?_r=${fn.random} -O ~/bin/setupWP.sh &>> /var/log/run.log
            bash ~/bin/setupWP.sh --pgcache true --objectcache true --REDIS_HOST 127.0.0.1

success:
  email: success/email/${settings.topology}/${globals.CLUSTER_TYPE}-${globals.EMAIL}.md?_r=${fn.random}
  text: success/text/${globals.CLUSTER_TYPE}/${globals.SUCCESS}.md?_r=${fn.random}

startPage: ${globals.PROTOCOL}://${settings.envName}.${globals.REGION-0}/
